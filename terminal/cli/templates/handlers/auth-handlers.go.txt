package handlers

import (
	"$APPNAME$/data"
	"crypto/sha256"
	"encoding/base64"
	"fmt"
	"github.com/cploutarchou/MicroGO/mailer"
	"github.com/cploutarchou/MicroGO/url_signer"
	"net/http"
	"time"
)

func (h *Handlers) UserLogin(w http.ResponseWriter, r *http.Request) {
	_data := map[string]interface{}{
		"Title": "Login",
	}
	err := h.APP.Render.Page(w, r, "login", "main", nil, _data)
	if err != nil {
		h.APP.ErrorLog.Println(err)
	}
}

func (h *Handlers) PostUserLogin(w http.ResponseWriter, r *http.Request) {
	err := r.ParseForm()
	if err != nil {
		_, err := w.Write([]byte(err.Error()))
		if err != nil {
			h.APP.ErrorLog.Println(err)
			return
		}
		return
	}
	email := r.Form.Get("email")
	password := r.Form.Get("password")
	user, err := h.Models.User.GetByEmail(email)

	if err != nil {
		_, err := w.Write([]byte(err.Error()))
		if err != nil {
			h.APP.ErrorLog.Println(err)
			return
		}
		return
	}
	valid, err := user.PasswordMatches(password)
	if err != nil {
		_, err := w.Write([]byte(err.Error()))
		if err != nil {
			h.APP.ErrorLog.Println(err)
			return
		}
		return
	}
	if !valid {
		_, err := w.Write([]byte("Invalid password"))
		if err != nil {
			h.APP.ErrorLog.Println(err.Error())
			return
		}
		return
	}
	// Check if user set remember me flag and
	if r.Form.Get("remember") == "remember" {
		randomStr := h.createRandomString(12)
		hashed := sha256.New()
		_, err := hashed.Write([]byte(randomStr))
		if err != nil {
			h.APP.ErrorStatus(w, http.StatusBadRequest)
			return
		}
		sha := base64.URLEncoding.EncodeToString(hashed.Sum(nil))
		rm := data.RememberToken{}
		err = rm.InsertToken(user.ID, sha)
		if err != nil {
			h.APP.ErrorStatus(w, http.StatusBadRequest)
			return
		}

		// set cookie to remember
		expire := time.Now().Add(365 * 24 * 60 * 60 * time.Second)
		cookie := http.Cookie{
			Name:     fmt.Sprintf("_%s_remember", h.APP.AppName),
			Value:    fmt.Sprintf("%d|%s", user.ID, sha),
			Path:     "/",
			HttpOnly: true,
			Expires:  expire,
			Domain:   h.APP.Session.Cookie.Domain,
			MaxAge:   31535000,
			Secure:   h.APP.Session.Cookie.Secure,
			SameSite: http.SameSiteStrictMode,
		}
		http.SetCookie(w, &cookie)
		h.APP.Session.Put(r.Context(), "remember_token", sha)

	}
	h.APP.Session.Put(r.Context(), "userID", user.ID)
	http.Redirect(w, r, "/", http.StatusSeeOther)

}
func (h *Handlers) Logout(w http.ResponseWriter, r *http.Request) {

	// delete remember token  from session if exists
	if h.APP.Session.Exists(r.Context(), "remember_token") {
		rt := data.RememberToken{}
		_ = rt.Delete(h.APP.Session.GetString(r.Context(), "remember_token"))
	}
	cookie := http.Cookie{
		Name:     fmt.Sprintf("_%s_remember", h.APP.AppName),
		Value:    "",
		Path:     "/",
		HttpOnly: true,
		Expires:  time.Now().Add(-100 * time.Hour),
		Domain:   h.APP.Session.Cookie.Domain,
		MaxAge:   -1,
		Secure:   h.APP.Session.Cookie.Secure,
		SameSite: http.SameSiteStrictMode,
	}
	http.SetCookie(w, &cookie)
	err := h.APP.Session.RenewToken(r.Context())
	if err != nil {
		_, err := w.Write([]byte(err.Error()))
		if err != nil {
			h.APP.ErrorLog.Println(err.Error())
			return
		}
		return
	}
	h.APP.Session.Remove(r.Context(), "userID")
	h.APP.Session.Remove(r.Context(), "remember_token")
	err = h.APP.Session.Destroy(r.Context())
	if err != nil {
		_, err := w.Write([]byte(err.Error()))
		if err != nil {
			h.APP.ErrorLog.Println(err.Error())
			return
		}
		return
	}
	err = h.APP.Session.RenewToken(r.Context())
	if err != nil {
		_, err := w.Write([]byte(err.Error()))
		if err != nil {
			h.APP.ErrorLog.Println(err.Error())
			return
		}
		return
	}
	h.APP.Session.Remove(r.Context(), "userID")
	http.Redirect(w, r, "/users/login", http.StatusSeeOther)
}

func (h *Handlers) Forgot(w http.ResponseWriter, r *http.Request) {
	_data := map[string]interface{}{
		"Title": "Forgot password",
	}
	err := h.render(w, r, "forgot", "main", nil, _data)
	if err != nil {
		h.APP.ErrorLog.Println("Something went wrong unable to render page : ", err)
		h.APP.Error500(w, r)
	}

}
func (h *Handlers) PostForgot(w http.ResponseWriter, r *http.Request) {
	// parse form msgData
	err := r.ParseForm()
	if err != nil {
		h.APP.ErrorStatus(w, http.StatusBadRequest)
		return
	}
	// verify email if exists
	var u *data.User
	email := r.Form.Get("email")
	u, err = u.GetByEmail(email)
	if err != nil {
		h.APP.ErrorStatus(w, http.StatusBadRequest)
		return
	}
	// create link to reset password form
	link := fmt.Sprintf("%s/users/reset-password?email=%s", h.APP.Server.URL, email)
	sign := url_signer.Signer{
		Secret: []byte(h.APP.EncryptionKey),
	}
	// sing the link and send it to the user
	signed := sign.GenerateToken(link)
	h.APP.InfoLog.Println("Signed link : ", signed)

	var msgData struct {
		Name string
		Link string
	}
	msgData.Link = signed
	msgData.Name = fmt.Sprintf("%s %s", u.FirstName, u.LastName)
	msg := mailer.Message{
		To:             u.Email,
		Subject:        "Reset Password",
		Template:       "reset-password",
		TemplateFormat: mailer.HTMLTemplateFormat,
		Data:           msgData,
		From:           "cploutarchou@gmail.com",
	}
	h.APP.Mailer.Jobs <- msg
	res := <-h.APP.Mailer.Results
	if res.Error != nil {
		h.APP.ErrorStatus(w, http.StatusBadRequest)
		fmt.Println(res.Error)
		return
	}
	// redirect to login page
	http.Redirect(w, r, "/users/login", http.StatusSeeOther)
}

func (h *Handlers) ResetPasswordForm(w http.ResponseWriter, r *http.Request) {
	// Get the email from the query string
	email := r.URL.Query().Get("email")
	theUrl := r.RequestURI
	testUrl := fmt.Sprintf("%s%s", h.APP.Server.URL, theUrl)
	// VerifyToken the link
	signer := url_signer.Signer{
		Secret: []byte(h.APP.EncryptionKey),
	}
	valid := signer.VerifyToken(testUrl)
	if !valid {
		h.APP.ErrorLog.Print("Invalid link")
		h.APP.ErrorUnauthorized(w, r)
		return
	}
	// VerifyToken the link
	exprired := signer.Expired(testUrl, 60)
	if exprired {
		h.APP.ErrorLog.Print("Link expired")
		h.APP.ErrorUnauthorized(w, r)
		return
	}
	// Display the form
	encEmail, _ := h.encrypt(email)
	_data := map[string]interface{}{
		"Title": "Forgot password",
		"email": encEmail,
	}
	err := h.render(w, r, "reset-password", "main", nil, _data)
	if err != nil {
		h.APP.ErrorLog.Println("Something went wrong unable to render page : ", err)
		h.APP.ErrorUnauthorized(w, r)
	}

}

func (h *Handlers) PostResetPassword(w http.ResponseWriter, r *http.Request) {
	// Parse the form data
	err := r.ParseForm()
	if err != nil {
		h.APP.Error500(w, r)
		return
	}
	// Get the email from the query string and decrypt it
	email, err := h.decrypt(r.Form.Get("email"))
	if err != nil {
		h.APP.Error500(w, r)
		return
	}
	// Get the use from the database
	var u data.User
	user, err := u.GetByEmail(email)
	if err != nil {
		h.APP.Error500(w, r)
		return
	}
	// Reset the password
	err = user.ResetPassword(user.ID, r.Form.Get("password"))
	if err != nil {
		h.APP.Error500(w, r)
		return
	}
	// Redirect to the login page
	h.APP.Session.Put(r.Context(), "flash", "Your password has been reset. You can now login.")
	http.Redirect(w, r, "/users/login", http.StatusSeeOther)
}
